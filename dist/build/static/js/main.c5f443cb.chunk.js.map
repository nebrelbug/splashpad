{"version":3,"sources":["browser-storage/splash-settings.js","widgets/WidgetSettings.jsx","widgets/TextWidgetSettings.jsx","browser-storage/widget-content.js","widgets/Clock/index.jsx","widgets/Embed/index.jsx","widgets/Music/utils.js","widgets/Music/index.jsx","widgets/Note/index.jsx","widgets/Search/index.jsx","widgets/Text/index.jsx","widgets/widgets-list.js","AddItem.jsx","Grid.jsx","ColorPicker.jsx","FileUpload/UploadProgress.jsx","FileUpload/UploadedFileCard.jsx","FileUpload/index.jsx","Settings/Appearance.jsx","Settings/index.jsx","App.jsx","serviceWorker.ts","index.tsx","browser-storage/widgets.js"],"names":["storeName","getSplashSettings","category","key","ls","global","localStorage","JSON","parse","getItem","e","saveSplashSettings","value","oldCategorySettings","setItem","stringify","Portal","props","el","document","createElement","getElementById","appendChild","this","removeChild","ReactDOM","createPortal","children","Component","WidgetSettings","render","visible","id","title","onHide","disableScrollLocking","transitionEnterTimeout","transitionLeaveTimeout","TextWidgetSettings","widgetSettings","settings","style","width","marginLeft","label","footer","type","name","checked","border","onClick","onSettingsChange","className","menuItems","simplifiedMenu","align","onChange","newAlign","min","max","maxTextSize","step","valuePrecision","marginTop","leftIcon","fontSize","newFontSize","editable","triangle","colors","color","textColor","onChangeComplete","hex","widgetContentStore","require","createInstance","saveWidgetContent","uniqueWidgetId","newContent","a","oldContent","saveWidgetSettings","newSettings","then","catch","err","console","log","getWidgetContent","oldWidgetContent","removeItem","getWidgetSettings","Clock","startTimer","timerID","setInterval","tick","newValue","setState","state","uniqueKey","date","Date","displaySeconds","defaultSettings","setTimeout","now","clearInterval","position","display","height","visibility","verticalAlign","margin","textAlign","lineHeight","toLocaleTimeString","hour","minute","second","undefined","settingsVisible","hideSettings","Music","widgetContent","url","src","frameBorder","allow","allowFullScreen","lineDirection","placeholder","newURL","spotifyTrack","spotifyPlaylist","spotifyAlbum","originalLink","match","Note","content","updateTitle","bind","updateContent","event","target","padding","Mousetrap","Search","textInput","React","createRef","searchEngine","handleSubmit","preventDefault","returnValue","current","focus","unbind","query","replace","window","location","href","zDepth","paddingRight","backgroundColor","borderRadius","onSubmit","icon","marginBottom","marginRight","size","ref","newSearchEngine","Text","handleChange","toggleFontSize","oldFontSize","toggleTextAlign","currentAlign","onDoubleClick","editing","contentEditable","containerDiv","onBlur","contains","relatedTarget","editingGrid","top","left","html","innerRef","disabled","fallbackWidget","component","widgets","note","subheading","description","gridSettings","minH","w","h","search","settingsComponent","minW","clock","text","blank","music","embed","Embed","widgetList","Object","keys","map","AddButtons","show","hide","hideDescription","toggleEditing","mouseOver","addButtonHovered","mouseOut","handleKeyDown","which","keyCode","right","bottom","onMouseEnter","onMouseLeave","swapTheming","appSettings","buttonStyle","i","leftAvatar","suffix","random","addItem","primaryText","secondaryText","renderChildrenOutside","descriptionTitle","focusOnMount","PureComponent","ReactGridLayout","WidthProvider","RGL","defaultItems","x","y","WidgetGrid","showWidgetSettings","hideWidgetSettings","onLayoutChange","layout","otherlayouts","items","item","saveWidgets","toggleItemStatic","index","static","findPositionForItem","newItem","grid","Array","from","length","checkForSpace","col","row","forEach","error","onAddItem","itemConstraints","widgetCount","concat","saveWidgetCount","onRemoveItem","itemKey","deleteWidgetContent","filter","ind","recentlyDeletedItems","timeout","recentlyDeletedItem","recentlyDeletedItemContents","getWidgetsSync","getWidgets","showSettingsControls","appSettingsOpen","widget","WidgetComponent","background","zIndex","float","iconEl","faThumbtack","secondary","addToast","deletedItem","deletedItemContent","clearTimeout","itemContent","newItemsArray","splice","transform","showGridControls","onBreakpointChange","measureBeforeMount","useCSSTransforms","isDraggable","isResizable","preventCollision","draggableCancel","defaultProps","cols","rowHeight","compactType","ColorPicker","initialColor","handleChangeComplete","disableAlpha","presetColors","UploadProgress","uploading","progress","onAbortClick","file","raised","UploadedFileCard","formatter","Intl","DateTimeFormat","gcd","b","findClosestAspectRatio","naturalHeight","naturalWidth","denominator","aspectRatio","removeCard","onRemoveClick","data","lastModified","alt","cn","LOADING_PROPS","SimpleFileUpload","setFileUpload","fileUpload","setFile","abortUpload","abort","showButton","handleLoad","uploadedFile","uploadedData","guid","onLoadImage","handleProgress","removeFile","removeImage","initialImage","uploadedFileCard","transitionName","transitionLeave","accept","onLoadStart","onProgress","onLoad","backgroundImage","backgroundImageDarkness","backgroundImageURL","setBackgroundColor","body","setBackgroundImage","image","darkness","setBackgroundImageURL","imageURL","AppearanceSettings","onRemoveImage","onDarknessChange","controls","inlineIndicator","defaultValue","discrete","SimpleFullPageDialog","aria-labelledby","colored","primary","tabId","faPaypal","App","action","autohide","toasts","slice","push","dismissToast","toggleSettings","settingsOpen","inkDisabled","divRef","autohideTimeout","onDismiss","childContextTypes","inkContextTypes","Boolean","hostname","WebFontLoader","load","google","families","StrictMode","navigator","serviceWorker","ready","registration","unregister","message","localforage","widgetStore","driver","LOCALSTORAGE","Number","newCount"],"mappings":"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","file":"static/js/main.c5f443cb.chunk.js","sourcesContent":["const storeName = 'splash-settings-sync'\n\nfunction getSplashSettings(category, key) {\n  let ls = {}\n  if (global.localStorage) {\n    try {\n      ls =\n        JSON.parse(global.localStorage.getItem(storeName + '/' + category)) ||\n        {}\n    } catch (e) {\n      /*Ignore*/\n    }\n  }\n  return ls[key]\n}\n\nfunction saveSplashSettings(category, key, value) {\n  if (global.localStorage) {\n    var oldCategorySettings = {}\n    try {\n      oldCategorySettings =\n        JSON.parse(global.localStorage.getItem(storeName + '/' + category)) ||\n        {}\n    } catch (e) {\n      /*Ignore*/\n    }\n    global.localStorage.setItem(\n      storeName + '/' + category,\n      JSON.stringify({\n        ...oldCategorySettings,\n        [key]: value\n      })\n    )\n  }\n}\n\nexport { saveSplashSettings, getSplashSettings }\n","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { DialogContainer } from 'react-md'\n\n// Taken from https://codepen.io/gaearon/pen/yzMaBd?editors=1010\n\nclass Portal extends Component {\n  constructor(props) {\n    super(props)\n    // Create a div that we'll render the modal into. Because each\n    // Modal component has its own element, we can render multiple\n    // modal components into the modal container.\n    this.el = document.createElement('div')\n  }\n\n  componentDidMount() {\n    // Append the element into the DOM on mount. We'll render\n    // into the modal container element (see the HTML tab).\n    document.getElementById('dialog-container').appendChild(this.el)\n  }\n\n  componentWillUnmount() {\n    // Remove the element from the DOM when we unmount\n    document.getElementById('dialog-container').removeChild(this.el)\n  }\n\n  render() {\n    // Use a portal to render the children into the element\n    return ReactDOM.createPortal(\n      // Any valid React child: JSX, strings, arrays, etc.\n      this.props.children,\n      // A DOM element\n      this.el\n    )\n  }\n}\n\nexport default class WidgetSettings extends Component {\n  render = () => {\n    return (\n      this.props.visible && (\n        <Portal>\n          <DialogContainer\n            id='widget-settings-dialog'\n            visible={this.props.visible}\n            title='Widget Settings'\n            onHide={this.props.onHide}\n            disableScrollLocking={true}\n            transitionEnterTimeout={50}\n            transitionLeaveTimeout={50}\n          >\n            {this.props.children}\n          </DialogContainer>\n        </Portal>\n      )\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport WidgetSettings from './WidgetSettings'\n\nimport { TwitterPicker } from 'react-color'\n\nimport {\n  FontIcon,\n  ExpansionList,\n  ExpansionPanel,\n  SelectionControl,\n  SelectField,\n  Slider\n} from 'react-md'\n\nexport default class TextWidgetSettings extends Component {\n  render = () => {\n    var widgetSettings = this.props.settings || {}\n\n    return (\n      <WidgetSettings visible={this.props.visible} onHide={this.props.onHide}>\n        {this.props.children}\n        <ExpansionList\n          style={{ width: 'calc(100% + 48px)', marginLeft: '-24px' }}\n        >\n          <ExpansionPanel label='Text Appearance' footer={null}>\n            <SelectionControl\n              type='switch'\n              label='Show Border'\n              name='show-border'\n              checked={widgetSettings.border}\n              onClick={() => {\n                this.props.onSettingsChange('border', !widgetSettings.border)\n              }}\n            />\n            <SelectField\n              id='text-widget-align'\n              label='Align'\n              // placeholder='Center'\n              className='md-cell'\n              menuItems={[\n                {\n                  label: 'Left',\n                  value: 'left'\n                },\n                {\n                  label: 'Center',\n                  value: 'center'\n                },\n                {\n                  label: 'Right',\n                  value: 'right'\n                }\n              ]}\n              simplifiedMenu={true}\n              value={widgetSettings.align}\n              onChange={(newAlign) => {\n                this.props.onSettingsChange('align', newAlign)\n              }}\n            />\n            <Slider\n              // label='Discrete with ticks and precision'\n              // discrete\n              min={1}\n              max={this.props.maxTextSize || 15}\n              step={1}\n              // discreteTicks={0.25}\n              valuePrecision={2}\n              style={{ marginTop: '10px' }}\n              leftIcon={<FontIcon>format_size</FontIcon>}\n              value={widgetSettings.fontSize}\n              onChange={(newFontSize) => {\n                this.props.onSettingsChange('fontSize', newFontSize)\n              }}\n              editable\n            />\n            <br />\n            <TwitterPicker\n              triangle={'hide'}\n              width='100%'\n              colors={[\n                '#000',\n                '#fff',\n                '#9e9e9e', // $md-grey-500\n                '#03a9f4', // $md-light-blue-500\n                '#f44336' // $md-red-500\n                // '#ff6e40' // $md-deep-orange-a-200\n              ]}\n              color={widgetSettings.textColor}\n              onChangeComplete={(color) => {\n                this.props.onSettingsChange('textColor', color.hex)\n              }}\n            />\n          </ExpansionPanel>\n          {/* <ExpansionPanel label='Other Settings' footer={null}>\n            {this.props.children}\n          </ExpansionPanel> */}\n        </ExpansionList>\n      </WidgetSettings>\n    )\n  }\n}\n","var localforage = require('localforage')\n\nvar widgetContentStore = localforage.createInstance({\n  name: 'splash-widget-content'\n})\n\nasync function saveWidgetContent(uniqueWidgetId, newContent) {\n  let oldContent = await widgetContentStore.getItem(uniqueWidgetId)\n\n  await widgetContentStore.setItem(uniqueWidgetId, {\n    ...oldContent,\n    ...newContent\n  })\n}\n\nfunction saveWidgetSettings(uniqueWidgetId, newSettings) {\n  widgetContentStore\n    .getItem(uniqueWidgetId)\n    .then(function (oldContent) {\n      // This code runs once the value has been loaded\n      // from the offline store.\n      oldContent = oldContent || {}\n      widgetContentStore.setItem(uniqueWidgetId, {\n        ...oldContent,\n        settings: {\n          ...oldContent.settings,\n          ...newSettings\n        }\n      })\n    })\n    .catch(function (err) {\n      // This code runs if there were any errors\n      console.log(err)\n    })\n}\n\nasync function getWidgetContent(uniqueWidgetId) {\n  return await widgetContentStore.getItem(uniqueWidgetId)\n}\n\nasync function deleteWidgetContent(uniqueWidgetId) {\n  // This will return the old widget content\n  let oldWidgetContent = await widgetContentStore.getItem(uniqueWidgetId)\n  await widgetContentStore.removeItem(uniqueWidgetId)\n  return oldWidgetContent\n}\n\nasync function getWidgetSettings(uniqueWidgetId) {\n  return (\n    ((await widgetContentStore.getItem(uniqueWidgetId)) || {}).settings || {}\n  )\n}\n\nexport {\n  saveWidgetContent,\n  getWidgetContent,\n  deleteWidgetContent,\n  saveWidgetSettings,\n  getWidgetSettings\n}\n","import React, { Component } from 'react'\n\nimport TextWidgetSettings from '../TextWidgetSettings'\n\nimport { SelectionControl } from 'react-md'\n\nimport {\n  getWidgetContent,\n  saveWidgetContent,\n  saveWidgetSettings,\n  getWidgetSettings\n} from '../../browser-storage/widget-content'\n\nexport default class Clock extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      date: new Date(),\n      settings: {\n        align: 'center',\n        fontSize: 2,\n        border: false,\n        textColor: '#000',\n        displaySeconds: true,\n        ...this.props.defaultSettings\n      },\n      visible: false\n    }\n  }\n\n  startTimer = () => {\n    this.timerID = setInterval(() => this.tick(), 1000)\n  }\n\n  onSettingsChange = (key, newValue) => {\n    this.setState(\n      {\n        settings: {\n          ...this.state.settings,\n          [key]: newValue\n        }\n      },\n      () => {\n        saveWidgetSettings(this.props.uniqueKey, {\n          [key]: newValue\n        })\n      }\n    )\n  }\n\n  componentDidMount() {\n    getWidgetSettings(this.props.uniqueKey).then((widgetSettings) => {\n      if (widgetSettings) {\n        console.log('settings is:')\n        console.log(widgetSettings)\n        let defaultSettings = this.props.defaultSettings\n        this.setState({\n          settings: {\n            fontSize: widgetSettings.fontSize || defaultSettings.fontSize || 2,\n            align: widgetSettings.align || defaultSettings.align || 'center',\n            border: widgetSettings.border || defaultSettings.border || false, // false is default\n            textColor:\n              widgetSettings.textColor || defaultSettings.textColor || '#000',\n            displaySeconds:\n              widgetSettings.displaySeconds ||\n              defaultSettings.displaySeconds ||\n              false\n          },\n          visible: true\n        })\n      }\n    })\n\n    setTimeout(this.startTimer, (Date.now() % 1000) + 10) // wait until the nearest whole second, then 10 extra milliseconds so we don't have two clocks right on opposite sides of the second\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID)\n  }\n\n  tick() {\n    this.setState({\n      date: new Date()\n    })\n  }\n\n  render() {\n    var widgetSettings = this.state.settings || {}\n    return (\n      <>\n        <div\n          style={{\n            // padding: '6px',\n            position: 'absolute',\n            display: 'table',\n            width: '100%',\n            height: '100%',\n            visibility: this.state.visible ? 'visible' : 'hidden'\n          }}\n          className={widgetSettings.border ? 'splash-widget-bordered' : ''}\n        >\n          <div style={{ display: 'table-cell', verticalAlign: 'middle' }}>\n            <h2\n              style={{\n                margin: 'auto',\n                textAlign: widgetSettings.align || 'center',\n                fontSize: widgetSettings.fontSize + 'vw',\n                lineHeight: widgetSettings.fontSize + 'px',\n                color: widgetSettings.textColor || 'black'\n              }}\n            >\n              {this.state.date.toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit',\n                second: this.state.settings.displaySeconds\n                  ? '2-digit'\n                  : undefined\n              })}\n            </h2>\n          </div>\n        </div>\n        <TextWidgetSettings\n          visible={this.props.settingsVisible}\n          onHide={this.props.hideSettings}\n          settings={widgetSettings}\n          onSettingsChange={this.onSettingsChange}\n          maxTextSize={20}\n        >\n          <SelectionControl\n            type='switch'\n            label='Display Seconds'\n            name='display-seconds'\n            checked={widgetSettings.displaySeconds}\n            onClick={() => {\n              this.onSettingsChange(\n                'displaySeconds',\n                !widgetSettings.displaySeconds\n              )\n            }}\n          />\n        </TextWidgetSettings>\n      </>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { TextField } from 'react-md'\nimport {\n  getWidgetContent,\n  saveWidgetContent\n} from '../../browser-storage/widget-content'\n\nimport WidgetSettings from '../WidgetSettings'\n\nimport './embed.css'\n\nvar defaultEmbed = 'https://wikipedia.org'\n\nexport default class Music extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n  }\n\n  componentDidMount() {\n    getWidgetContent(this.props.uniqueKey).then((widgetContent) => {\n      if (widgetContent) {\n        this.setState({\n          url: widgetContent.url\n        })\n      } else {\n        this.setState({\n          url: defaultEmbed\n        })\n      }\n    })\n  }\n\n  onSettingsChange = (key, newValue) => {\n    this.setState(\n      {\n        [key]: newValue\n      },\n      () => {\n        saveWidgetContent(this.props.uniqueKey, {\n          [key]: newValue\n        })\n      }\n    )\n  }\n\n  render() {\n    return (\n      <>\n        <div\n          style={{\n            //padding: '6px',\n            height: '100%'\n          }}\n        >\n          {this.state.url && (\n            <iframe\n              title={'Embed - ' + this.props.uniqueKey}\n              width='100%'\n              height='100%'\n              src={this.state.url || ''}\n              frameBorder='0'\n              allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture'\n              allowFullScreen\n            ></iframe>\n          )}\n        </div>\n        <WidgetSettings\n          visible={this.props.settingsVisible}\n          onHide={this.props.hideSettings}\n        >\n          <TextField\n            id='floating-center-title'\n            label='Embed Frame URL'\n            lineDirection='center'\n            placeholder='https://example.com/ ...'\n            className='md-cell md-cell--bottom'\n            style={{ width: 'auto' }}\n            value={this.state.url}\n            onChange={(newURL) => {\n              this.onSettingsChange('url', newURL)\n            }}\n          />\n        </WidgetSettings>\n      </>\n    )\n  }\n}\n","const spotifyTrack = /open\\.spotify\\.com\\/track\\/([\\w\\d]+)/\nconst spotifyPlaylist = /open\\.spotify\\.com\\/playlist\\/([\\w\\d]+)/\nconst spotifyAlbum = /open\\.spotify\\.com\\/album\\/([\\w\\d]+)/\n\nexport default function getIFrameURL(originalLink) {\n  if (originalLink.match(spotifyTrack)) {\n    return (\n      'https://open.spotify.com/embed/track/' +\n      originalLink.match(spotifyTrack)[1]\n    )\n  } else if (originalLink.match(spotifyPlaylist)) {\n    return (\n      'https://open.spotify.com/embed/playlist/' +\n      originalLink.match(spotifyPlaylist)[1]\n    )\n  } else if (originalLink.match(spotifyAlbum)) {\n    return (\n      'https://open.spotify.com/embed/album/' +\n      originalLink.match(spotifyAlbum)[1]\n    )\n  }\n\n  return originalLink\n}\n","import React, { Component, useEffect } from 'react'\nimport { TextField } from 'react-md'\nimport {\n  getWidgetContent,\n  saveWidgetContent\n} from '../../browser-storage/widget-content'\n\nimport WidgetSettings from '../WidgetSettings'\n\nimport getIFrameURL from './utils'\n\nimport './music.css'\n\nvar defaultSong = 'https://open.spotify.com/embed/track/7GhIk7Il098yCjg4BQjzvb'\n\nexport default class Music extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {}\n  }\n\n  componentDidMount() {\n    getWidgetContent(this.props.uniqueKey).then((widgetContent) => {\n      if (widgetContent) {\n        this.setState({\n          url: widgetContent.url\n        })\n      } else {\n        this.setState({\n          url: defaultSong\n        })\n      }\n    })\n  }\n\n  onSettingsChange = (key, newValue) => {\n    this.setState(\n      {\n        [key]: newValue\n      },\n      () => {\n        saveWidgetContent(this.props.uniqueKey, {\n          [key]: newValue\n        })\n      }\n    )\n  }\n\n  render() {\n    return (\n      <>\n        <div\n          style={{\n            // padding: '6px',\n            height: '100%'\n          }}\n        >\n          {this.state.url && (\n            <iframe\n              title={'Spotify embed - ' + this.props.uniqueKey}\n              width='100%'\n              height='100%'\n              src={getIFrameURL(this.state.url || '')}\n              frameBorder='0'\n              allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture'\n              allowFullScreen\n            ></iframe>\n          )}\n        </div>\n        <WidgetSettings\n          visible={this.props.settingsVisible}\n          onHide={this.props.hideSettings}\n        >\n          <TextField\n            id='floating-center-title'\n            label='Playlist/Track URL'\n            lineDirection='center'\n            placeholder='https://open.spotify.com ...'\n            className='md-cell md-cell--bottom'\n            style={{ width: 'auto' }}\n            value={this.state.url}\n            onChange={(newURL) => {\n              this.onSettingsChange('url', newURL)\n            }}\n          />\n        </WidgetSettings>\n      </>\n    )\n  }\n}\n","import React, { Component } from 'react'\n// import { TextField } from 'react-md'\nimport {\n  getWidgetContent,\n  saveWidgetContent\n} from '../../browser-storage/widget-content'\n\nimport './note.css'\n\nexport default class Note extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { title: '', content: '' }\n    this.updateTitle = this.updateTitle.bind(this)\n    this.updateContent = this.updateContent.bind(this)\n  }\n\n  componentDidMount() {\n    getWidgetContent(this.props.uniqueKey).then((widgetContent) => {\n      if (widgetContent) {\n        this.setState({\n          title: widgetContent.title || '',\n          content: widgetContent.content || ''\n        })\n      }\n    })\n  }\n\n  updateTitle(event) {\n    this.setState({ title: event.target.value }, () => {\n      saveWidgetContent(this.props.uniqueKey, { title: this.state.title })\n    })\n  }\n\n  updateContent(event) {\n    this.setState({ content: event.target.value }, () => {\n      saveWidgetContent(this.props.uniqueKey, { content: this.state.content })\n    })\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          width: '100%',\n          height: '100%'\n          //padding: '6px'\n        }}\n      >\n        <div className='postit'>\n          <div\n            className='md-text-field-container md-full-width md-text-field-container--input'\n            style={{ width: '100%', height: '100%', padding: '10px' }}\n          >\n            <input\n              // id='placeholder-only-title'\n              placeholder='Title'\n              type='text'\n              className='md-text-field md-text-field--margin md-full-width md-text'\n              style={{\n                margin: 'auto',\n                fontSize: '24px'\n              }}\n              value={this.state.title}\n              onChange={this.updateTitle}\n            />\n            <textarea\n              className='postbody md-text-field md-text-field--multiline md-full-width md-text'\n              placeholder='Note to self...'\n              value={this.state.content}\n              onChange={this.updateContent}\n              // style={{ marginTop: '6px', height: 'calc(100%-36px)' }}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Paper, TextField, SelectField, FontIcon, Button } from 'react-md'\n\nimport {\n  getWidgetSettings,\n  saveWidgetSettings\n} from '../../browser-storage/widget-content'\n\nimport WidgetSettings from '../WidgetSettings'\n\nimport './search.css'\n\nvar Mousetrap = require('mousetrap')\n\nexport default class Search extends Component {\n  constructor(props) {\n    super(props)\n    this.textInput = React.createRef()\n    this.state = {\n      value: '',\n      settings: {\n        searchEngine: 'google'\n      }\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n\n  componentDidMount() {\n    getWidgetSettings(this.props.uniqueKey).then((widgetSettings) => {\n      if (widgetSettings) {\n        this.setState({\n          settings: { ...this.state.settings, ...widgetSettings }\n        })\n      }\n    })\n\n    Mousetrap.bind('/', (e) => {\n      if (e.preventDefault) {\n        e.preventDefault()\n      } else {\n        // internet explorer\n        e.returnValue = false\n      }\n\n      this.textInput.current.focus()\n    })\n  }\n\n  onSettingsChange = (key, newValue) => {\n    this.setState(\n      {\n        settings: {\n          ...this.state.settings,\n          [key]: newValue\n        }\n      },\n      () => {\n        saveWidgetSettings(this.props.uniqueKey, {\n          [key]: newValue\n        })\n      }\n    )\n  }\n\n  componentWillUnmount() {\n    Mousetrap.unbind('/')\n  }\n\n  handleSubmit(event) {\n    event.preventDefault()\n\n    var query = this.state.value.replace(' ', '+')\n    var url\n\n    var searchEngine = this.state.settings.searchEngine || 'google'\n\n    if (searchEngine === 'google') {\n      url = `https://www.google.com/search?q=${query}`\n    } else if (searchEngine === 'duckduckgo') {\n      url = `https://duckduckgo.com/?q=${query}`\n    } else if (searchEngine === 'stackoverflow') {\n      url = `https://stackoverflow.com/search?q=${query}`\n    } else if (searchEngine === 'wikipedia') {\n      url = `https://en.wikipedia.org/wiki/Special:Search?search=${query}`\n    }\n\n    if (!url) {\n      // something somehow went wrong\n      url = 'https://www.google.com/search?q=' + query\n    }\n\n    window.location.href = url // this way it keeps the new tab page in the browser history\n  }\n\n  render() {\n    return (\n      <>\n        <div\n          style={{\n            // padding: '6px',\n            position: 'absolute',\n            display: 'table',\n            width: '100%',\n            height: '100%'\n          }}\n        >\n          <div style={{ display: 'table-cell', verticalAlign: 'middle' }}>\n            <Paper\n              zDepth={2}\n              className='splash-searchbar'\n              style={{\n                // padding: '6px',\n                paddingRight: '28px',\n                backgroundColor: 'white',\n                borderRadius: '100px'\n              }}\n            >\n              <form onSubmit={this.handleSubmit}>\n                <TextField\n                  id='phone-number-with-icon-left'\n                  className='no-search-input-x'\n                  type='search'\n                  // placeholder\n                  leftIcon={\n                    <Button\n                      icon\n                      style={{\n                        marginBottom: '0px',\n                        marginRight: '-4px'\n                      }}\n                      onClick={() => {\n                        this.setState({\n                          value: ''\n                        })\n                      }}\n                    >\n                      search\n                    </Button>\n                  }\n                  // error={true}\n                  // rightIcon={\n                  //   <Button\n                  //     icon\n                  //     style={{\n                  //       marginBottom: '0px',\n                  //       marginLeft: '4px'\n                  //     }}\n                  //     onClick={() => {\n                  //       this.setState({\n                  //         value: ''\n                  //       })\n                  //     }}\n                  //   >\n                  //     search\n                  //   </Button>\n                  // }\n                  size={10}\n                  ref={this.textInput}\n                  value={this.state.value}\n                  onChange={(newValue) => {\n                    this.setState({ value: newValue })\n                  }}\n                />\n              </form>\n            </Paper>\n          </div>\n        </div>\n        <WidgetSettings\n          visible={this.props.settingsVisible}\n          onHide={this.props.hideSettings}\n        >\n          <SelectField\n            id='select-search-engine'\n            label='Search Engine'\n            // placeholder='Center'\n            className='md-cell'\n            style={{ width: 'auto' }}\n            menuItems={[\n              {\n                label: 'Google',\n                value: 'google'\n              },\n              {\n                label: 'DuckDuckGo',\n                value: 'duckduckgo'\n              },\n              {\n                label: 'Wikipedia',\n                value: 'wikipedia'\n              },\n              {\n                label: 'Stack Overflow',\n                value: 'stackoverflow'\n              }\n            ]}\n            simplifiedMenu={true}\n            value={this.state.settings.searchEngine}\n            onChange={(newSearchEngine) => {\n              this.onSettingsChange('searchEngine', newSearchEngine)\n            }}\n          />\n        </WidgetSettings>\n      </>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport {\n  getWidgetContent,\n  saveWidgetContent,\n  saveWidgetSettings,\n  getWidgetSettings\n} from '../../browser-storage/widget-content'\n\nimport ContentEditable from 'react-contenteditable'\n\nimport { Button } from 'react-md'\n\nimport TextWidgetSettings from '../TextWidgetSettings'\n\nimport './text.css'\n\n// var fontSizes = ['1em', '1.3em', '1.5em', '2em', '3em']\n\nexport default class Text extends Component {\n  constructor() {\n    super()\n    this.state = {\n      content: '',\n      // hovered: false,\n      editing: false,\n      settings: {\n        align: 'center',\n        fontSize: 2,\n        border: false,\n        textColor: '#000'\n      }\n    }\n\n    this.contentEditable = React.createRef()\n    this.containerDiv = React.createRef()\n  }\n\n  componentDidMount() {\n    getWidgetContent(this.props.uniqueKey).then((widgetContent) => {\n      if (widgetContent) {\n        var settings = widgetContent.settings || {}\n        console.log('settings is:')\n        console.log(settings)\n        this.setState({\n          content: widgetContent.content || '',\n          settings: {\n            fontSize: settings.fontSize || 2,\n            align: settings.align || 'center',\n            border: settings.border || false, // false is default\n            textColor: settings.textColor || '#000'\n          }\n        })\n      }\n    })\n  }\n\n  handleChange = (e) => {\n    this.setState({ content: e.target.value }, () => {\n      saveWidgetContent(this.props.uniqueKey, { content: this.state.content })\n    })\n  }\n\n  // mouseOver = () => {\n  //   this.setState({ hovered: true })\n  // }\n\n  // mouseOut = () => {\n  //   this.setState({ hovered: false })\n  // }\n\n  onSettingsChange = (key, newValue) => {\n    this.setState(\n      {\n        settings: {\n          ...this.state.settings,\n          [key]: newValue\n        }\n      },\n      () => {\n        saveWidgetSettings(this.props.uniqueKey, {\n          [key]: newValue\n        })\n      }\n    )\n  }\n\n  toggleFontSize = () => {\n    let oldFontSize = this.state.settings.fontSize\n    let newFontSize = 2 // default\n\n    if (oldFontSize < 2) {\n      newFontSize = 2\n    } else if (oldFontSize < 4) {\n      newFontSize = 4\n    } else if (oldFontSize < 6) {\n      newFontSize = 6\n    } else if (oldFontSize < 8) {\n      newFontSize = 8\n    } else if (oldFontSize < 10) {\n      newFontSize = 10\n    } else if (oldFontSize >= 10) {\n      newFontSize = 2\n    }\n\n    console.log(`fontSize was ${oldFontSize} and is now ${newFontSize}`)\n\n    this.onSettingsChange('fontSize', newFontSize)\n  }\n\n  toggleTextAlign = () => {\n    var currentAlign = this.state.settings.align\n    var newAlign = 'center'\n\n    if (currentAlign === 'left') {\n      newAlign = 'center' // unnecessary, but for readability\n    }\n    if (currentAlign === 'right') {\n      newAlign = 'left'\n    }\n    if (currentAlign === 'center') {\n      newAlign = 'right'\n    }\n\n    this.onSettingsChange('align', newAlign)\n  }\n\n  render = () => {\n    var widgetSettings = this.state.settings || {}\n\n    return (\n      <>\n        <div\n          style={{\n            // padding: '6px',\n            width: '100%',\n            height: '100%'\n          }}\n          // onMouseEnter={this.mouseOver}\n          // onMouseLeave={this.mouseOut}\n          onDoubleClick={() => {\n            this.setState({ editing: true }, () => {\n              this.contentEditable.current.focus()\n            })\n          }}\n          ref={this.containerDiv}\n          onBlur={(e) => {\n            if (!this.containerDiv.current.contains(e.relatedTarget)) {\n              this.setState({ editing: false })\n            }\n          }}\n        >\n          {this.props.editingGrid && !this.state.content && (\n            <p style={{ textAlign: 'center' }}>Text</p>\n          )}\n\n          {this.state.editing && (\n            <>\n              <Button\n                style={{\n                  height: 18,\n                  width: 18,\n                  padding: 0,\n                  position: 'absolute',\n                  top: -2,\n                  left: -2\n                }}\n                className='textEditButton'\n                icon\n                onClick={this.toggleFontSize}\n              >\n                format_size\n              </Button>\n              <Button\n                style={{\n                  height: 18,\n                  width: 18,\n                  padding: 0,\n                  position: 'absolute',\n                  top: -2,\n                  left: 18\n                }}\n                className='textEditButton'\n                icon\n                onClick={this.toggleTextAlign}\n              >\n                {'format_align_' + widgetSettings.align}\n              </Button>\n            </>\n          )}\n          <ContentEditable\n            html={this.state.content} // innerHTML of the editable div\n            innerRef={this.contentEditable}\n            disabled={!this.state.editing} // use true to disable edition\n            onChange={this.handleChange} // handle innerHTML change\n            className={\n              'textEditWidget ' +\n              (this.state.editing ? 'editing' : '') +\n              (this.state.settings.border ? 'splash-widget-bordered' : '')\n            }\n            style={{\n              fontSize: widgetSettings.fontSize + 'vw',\n              textAlign: widgetSettings.align || 'center',\n              color: widgetSettings.textColor || '#000'\n            }}\n          />\n        </div>\n\n        <TextWidgetSettings\n          visible={this.props.settingsVisible}\n          onHide={this.props.hideSettings}\n          settings={widgetSettings}\n          onSettingsChange={this.onSettingsChange}\n        />\n      </>\n    )\n  }\n}\n","import React from 'react'\n\nimport Clock from './Clock'\nimport Embed from './Embed'\nimport Music from './Music'\nimport Note from './Note'\nimport Search from './Search'\nimport Text from './Text'\n\nfunction Blank({ editingGrid }) {\n  return (\n    <div\n      style={{\n        //padding: '6px',\n        fontSize: '12px',\n        textAlign: 'center'\n      }}\n    >\n      {editingGrid && <p style={{ lineHeight: 1 }}>Place&shy;holder</p>}\n    </div>\n  )\n}\n\nfunction Unknown() {\n  return (\n    <div\n      style={{\n        // padding: '6px',\n        fontSize: '14px',\n        textAlign: 'center'\n      }}\n    >\n      <p>Uh-oh. Unknown widget type</p>\n    </div>\n  )\n}\n\nvar widgets = {\n  note: {\n    name: 'Sticky Note',\n    subheading: '',\n    description: <p>This sticky note widget stores its content locally</p>,\n    component: Note,\n    icon: 'note',\n    color: 'amber',\n    gridSettings: {\n      minH: 2,\n      w: 3,\n      h: 4\n    }\n  },\n  search: {\n    name: 'Searchbar',\n    subheading: '',\n    component: Search,\n    icon: 'search',\n    settingsComponent: true,\n    gridSettings: {\n      minH: 2,\n      minW: 2,\n      w: 4\n    }\n  },\n  clock: {\n    name: 'Clock',\n    subheading: '',\n    component: Clock,\n    icon: 'schedule',\n    settingsComponent: true\n  },\n  text: {\n    name: 'Text',\n    subheading: 'Double-click to edit',\n    component: Text,\n    icon: 'text_fields',\n    settingsComponent: true\n  },\n  blank: {\n    name: 'Blank Widget',\n    subheading: 'For spacing',\n    component: Blank,\n    icon: ''\n  },\n  music: {\n    name: 'Music',\n    subheading: 'Embed playlists or tracks',\n    description: (\n      <p>Currently this only supports Spotify playlists, albums, and tracks.</p>\n    ),\n    component: Music,\n    icon: 'music_note',\n    settingsComponent: true\n  },\n  embed: {\n    name: 'Embed',\n    subheading: '',\n    component: Embed,\n    icon: 'code',\n    settingsComponent: true\n  }\n}\n\nvar fallbackWidget = {\n  name: 'Unknown Widget',\n  component: Unknown,\n  icon: 'check_box_outline_blank'\n}\n\nexport { fallbackWidget }\nexport default widgets\n","import React from 'react'\nimport {\n  Button,\n  FontIcon,\n  DialogContainer,\n  List,\n  ListItem,\n  Subheader,\n  Divider,\n  Grid,\n  Cell,\n  Avatar\n} from 'react-md'\nimport widgets from './widgets/widgets-list'\n\nimport './addwidgets.css'\n\nvar Mousetrap = require('mousetrap')\n\nconst InfoIcon = () => <FontIcon>info</FontIcon>\n\nlet widgetList = Object.keys(widgets).map((key) => ({\n  ...widgets[key],\n  key: key\n}))\n\nexport default class AddButtons extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      visible: false,\n      addButtonHovered: false,\n      description: false\n    }\n  }\n\n  componentDidMount() {\n    Mousetrap.bind('p', this.toggleEditing)\n  }\n\n  componentWillUnmount() {\n    Mousetrap.unbind('p')\n  }\n\n  show = () => {\n    this.setState({ visible: true })\n  }\n\n  hide = () => {\n    this.setState({ visible: false })\n  }\n\n  hideDescription = () => {\n    this.setState({ description: false })\n  }\n\n  toggleEditing = () => {\n    this.setState({ visible: !this.state.visible })\n  }\n\n  mouseOver = () => {\n    this.setState({ addButtonHovered: true })\n  }\n\n  mouseOut = () => {\n    this.setState({ addButtonHovered: false })\n  }\n\n  handleKeyDown = (e) => {\n    const key = e.which || e.keyCode\n    if (key === 13 || key === 32) {\n      // also close on enter or space keys\n      // this.hide()\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {/* Some easy-access buttons */}\n        <div\n          style={{\n            position: 'fixed',\n            right: '8px',\n            bottom: '56px',\n            height: this.state.addButtonHovered ? 48 + 48 + 'px' : '48px',\n            width: '48px'\n          }}\n          onMouseEnter={this.mouseOver}\n          onMouseLeave={this.mouseOut}\n        >\n          {/* {this.state.addButtonHovered && (\n            <Button\n              style={{\n                position: 'fixed',\n                right: 8,\n                bottom: 104,\n                height: 48,\n                width: 48,\n                padding: 12\n              }}\n              icon\n              // secondary\n              swapTheming\n              onClick={() => {\n                this.props.addItem('note')\n              }}\n              className='actionButton'\n            >\n              note_add\n            </Button>\n          )} */}\n          <Button\n            style={{\n              position: 'fixed',\n              right: '8px',\n              bottom: '56px',\n              height: '48px',\n              width: '48px',\n              padding: '12px'\n            }}\n            icon\n            // secondary\n            swapTheming\n            onClick={this.show}\n            className={\n              'actionButton ' +\n              (this.props.appSettings.buttonStyle === 'light' ? 'light' : '')\n            }\n          >\n            add_circle_outline\n          </Button>\n        </div>\n        <DialogContainer\n          id='add-widget-dialog'\n          visible={this.state.visible}\n          title='Add Widget'\n          onHide={this.hide}\n          // width='40%'\n        >\n          {/* Consider adding search, larger dialog */}\n          <List className=''>\n            {/* <Subheader primaryText='Folders' /> */}\n            {widgetList.map(\n              ({ name, subheading, description, key, icon, color }, i) => (\n                <ListItem\n                  leftAvatar={\n                    <Avatar\n                      suffix={color}\n                      icon={<FontIcon>{icon}</FontIcon>}\n                      random\n                    />\n                  }\n                  onClick={() => {\n                    this.hide()\n                    this.props.addItem(key)\n                  }}\n                  // rightIcon={<InfoIcon />}\n                  primaryText={name}\n                  secondaryText={subheading}\n                  renderChildrenOutside\n                  key={i}\n                >\n                  <Button\n                    icon\n                    onClick={() => {\n                      this.setState({\n                        description: description,\n                        descriptionTitle: name\n                      })\n                    }}\n                  >\n                    info\n                  </Button>\n                </ListItem>\n              )\n            )}\n          </List>\n        </DialogContainer>\n        <DialogContainer\n          id='add-widget-description'\n          visible={this.state.description !== false}\n          title={this.state.descriptionTitle}\n          onHide={this.hideDescription}\n          focusOnMount={false}\n          // width='40%'\n        >\n          {this.state.description || <p>Responsive widget</p>}\n        </DialogContainer>\n      </>\n    )\n  }\n}\n","import React from 'react'\nimport RGL, { WidthProvider } from 'react-grid-layout'\nimport { Button } from 'react-md'\nimport AddButtons from './AddItem'\nimport Clock from './widgets/Clock'\nimport Note from './widgets/Note'\nimport Search from './widgets/Search'\nimport Text from './widgets/Text'\n\nimport './Grid.scss'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nimport {\n  getWidgets,\n  getWidgetsSync,\n  saveWidgets,\n  saveWidgetCount\n} from './browser-storage/widgets'\n\nimport {\n  saveWidgetContent,\n  deleteWidgetContent\n} from './browser-storage/widget-content'\n\nimport widgets, { fallbackWidget } from './widgets/widgets-list'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport { faThumbtack } from '@fortawesome/free-solid-svg-icons/faThumbtack'\n\nvar Mousetrap = require('mousetrap')\n\nconst ReactGridLayout = WidthProvider(RGL)\n\nconst defaultItems = [\n  // defaults\n  { i: 'widget-0', x: 3, y: 0, w: 6, h: 2, minH: 2, minW: 2, type: 'search' },\n  {\n    i: 'widget-2',\n    x: 10,\n    y: 0,\n    w: 2,\n    h: 2,\n    type: 'clock',\n    defaultSettings: {\n      align: 'center',\n      fontSize: 3,\n      border: false,\n      textColor: '#ffffff',\n      displaySeconds: false\n    }\n  },\n  { i: 'widget-1', x: 0, y: 2, w: 2, h: 4, minH: 2, type: 'note' }\n]\n\nexport default class WidgetGrid extends React.Component {\n  static defaultProps = {\n    className: 'layout',\n    cols: 12,\n    rowHeight: 35,\n    compactType: null\n  }\n\n  constructor(props) {\n    super(props)\n\n    const { widgets, widgetCount } = getWidgetsSync()\n\n    // console.log('widgets: ')\n    // console.log(widgets)\n\n    this.state = {\n      items: widgets || [],\n      recentlyDeletedItems: [],\n      recentlyDeletedItemContents: [],\n      widgetCount: widgetCount || false,\n      editing: false,\n      widgetSettings: false // 'widget-0'\n    }\n\n    // this.resetLayout = this.resetLayout.bind(this)\n  }\n\n  componentDidMount() {\n    getWidgets().then(({ widgets, widgetCount }) => {\n      this.setState({\n        items: widgets || defaultItems,\n        widgetCount: widgetCount || 3 // widgetCount should be undefined, or a number greater than 2\n      })\n    })\n\n    Mousetrap.bind('e', this.toggleEditing)\n  }\n\n  componentWillUnmount() {\n    Mousetrap.unbind('e')\n  }\n\n  toggleEditing = () => {\n    this.setState({ editing: !this.state.editing, widgetSettings: false })\n  }\n\n  showWidgetSettings = (uniqueKey) => {\n    this.setState({ widgetSettings: uniqueKey })\n  }\n\n  hideWidgetSettings = () => {\n    this.setState({ widgetSettings: false })\n  }\n\n  onLayoutChange = (layout, otherlayouts) => {\n    // this.props.onLayoutChange(layout)\n    // console.log('layout: ')\n    // console.log(layout)\n\n    this.setState(\n      {\n        items: this.state.items.map(function (item, i) {\n          return {\n            ...item,\n            ...layout[i]\n          }\n        })\n      },\n      () => {\n        saveWidgets(this.state.items)\n      }\n    )\n  }\n\n  toggleItemStatic = (index) => {\n    // see https://stackoverflow.com/a/49502115/7983596\n    let items = this.state.items.map((item, i) => ({\n      ...item,\n      static: i === index ? !item.static : item.static // if correct element, toggle item.static\n    }))\n\n    this.onLayoutChange(items)\n  }\n\n  findPositionForItem = (newItem) => {\n    let items = this.state.items\n\n    var grid = Array.from({ length: 12 }, () => []) // This is to make sure the columns aren't deep linked\n\n    items.forEach((item) => {\n      for (var col = item.x; col < item.x + item.w; col++) {\n        for (var row = item.y; row < item.y + item.h; row++) {\n          grid[col][row] = true // filled\n        }\n      }\n    })\n\n    // window.grid = grid\n\n    function checkForSpace(x, y, width, height) {\n      if (x + width > 12) {\n        return false\n      }\n      for (var col = x; col < x + width; col++) {\n        for (var row = y; row < y + height; row++) {\n          if (grid[col][row] === true) {\n            // filled\n            return false\n          }\n        }\n      }\n      return true\n    }\n\n    for (var y = 0; y < 10000; y++) {\n      for (var x = 0; x < 12; x++) {\n        if (grid[x][y] !== true) {\n          if (checkForSpace(x, y, newItem.w, newItem.h)) {\n            return [x, y]\n          }\n        }\n      }\n    }\n    // TIME OUT\n    console.error('Could not find a place for new item in the first 10000 rows')\n\n    return [0, 0]\n  }\n\n  createElement(el, ind) {\n    const key = el.i\n    // console.log(\n    //   `this.state.widgetSettings = ${this.state.widgetSettings}, key = ${key}`\n    // )\n\n    let showSettingsControls =\n      this.state.editing &&\n      !this.state.widgetSettings &&\n      !this.props.appSettingsOpen\n\n    var widget = widgets[el.type] || fallbackWidget\n\n    var WidgetComponent = widget.component\n\n    return (\n      <div\n        key={key}\n        style={{\n          background: showSettingsControls ? 'rgba(230, 230, 230, 0.5)' : 'none'\n        }}\n      >\n        {showSettingsControls && (\n          <>\n            {/* <div style={{ position: 'absolute', left: '50%' }}></div> */}\n            <Button\n              style={{\n                height: 18,\n                width: 18,\n                padding: 0,\n                zIndex: 999,\n                float: 'left',\n                position: 'absolute',\n                top: 2,\n                left: 2\n              }}\n              className='smallButton'\n              icon\n              iconEl={<FontAwesomeIcon icon={faThumbtack} />}\n              secondary={!!el.static}\n              swapTheming={!!el.static}\n              onClick={() => {\n                this.toggleItemStatic(ind)\n              }}\n            >\n              pin item to grid\n            </Button>\n            <Button\n              style={{\n                height: 18,\n                width: 18,\n                padding: 0,\n                zIndex: 999,\n                float: 'right',\n                position: 'absolute',\n                top: 2,\n                right: 2\n              }}\n              className='smallButton'\n              icon\n              onClick={() => {\n                var itemKey = this.state.items[ind].i\n\n                this.props.addToast(\n                  'Deleted ' + this.state.items[ind].type + ' widget',\n                  {\n                    children: 'UNDO',\n                    onClick: () => {\n                      console.log('Trying to undo delete item')\n                      var deletedItem\n                      var deletedItemContent\n                      this.setState(\n                        {\n                          recentlyDeletedItems: [\n                            ...this.state.recentlyDeletedItems\n                          ].filter(\n                            // loop through our recently deleted items\n                            // and find the one that has the same key\n                            // as the one we deleted\n                            function (recentlyDeletedItem) {\n                              if (recentlyDeletedItem.item.i === itemKey) {\n                                deletedItem = recentlyDeletedItem.item\n                                clearTimeout(recentlyDeletedItem.timeout)\n                              }\n                              return recentlyDeletedItem.item.i !== itemKey\n                            }\n                          ),\n                          recentlyDeletedItemContents: [\n                            ...this.state.recentlyDeletedItemContents\n                          ].filter(\n                            // loop through our recently deleted items' contents\n                            // and find the one that has the same key\n                            // as the one we deleted\n                            function (itemContent) {\n                              if (itemContent.key === itemKey) {\n                                deletedItemContent = itemContent.content\n                                console.log('Deleted item content: ')\n                                console.log(deletedItemContent)\n                                clearTimeout(itemContent.timeout)\n                              }\n                              return itemContent.key !== itemKey\n                            }\n                          )\n                        },\n                        () => {\n                          if (deletedItem) {\n                            let newItemsArray = [...this.state.items]\n                            // Insert the item in its old position\n                            newItemsArray.splice(ind, 0, deletedItem)\n                            saveWidgetContent(\n                              itemKey,\n                              deletedItemContent || {}\n                            ).then(() => {\n                              this.setState({\n                                items: newItemsArray\n                              })\n                            })\n                          }\n                        }\n                      )\n                    },\n                    style: { margin: '1em' }\n                  }\n                  // false\n                )\n                this.onRemoveItem(ind)\n              }}\n            >\n              close\n            </Button>\n          </>\n        )}\n        <WidgetComponent\n          uniqueKey={key}\n          defaultSettings={el.defaultSettings || {}}\n          settingsVisible={this.state.widgetSettings === key}\n          hideSettings={this.hideWidgetSettings}\n          editingGrid={this.state.editing}\n        />\n\n        {showSettingsControls && (\n          <div\n            style={{\n              position: 'absolute',\n              width: '100%',\n              height: '100%',\n              top: '0px',\n              left: '0px'\n            }}\n            className='draggableOverlay'\n          >\n            <div\n              style={{\n                position: 'relative',\n                top: '0',\n                left: '0',\n                width: '100%',\n                height: '100%'\n              }}\n            >\n              <div\n                style={{\n                  margin: 0,\n                  position: 'absolute',\n                  top: '50%',\n                  left: '50%',\n                  transform: 'translate(-50%, -50%)',\n                  width: '100%'\n                }}\n              >\n                <div style={{ width: 'min-content', margin: 'auto' }}>\n                  {/* <Button\n                    style={{\n                      paddingTop: '10px'\n                    }}\n                    className='settingsButton'\n                    secondary={!!el.static}\n                    swapTheming={!!el.static}\n                    icon\n                    iconEl={<FontAwesomeIcon icon={faThumbtack} />}\n                    onClick={() => {\n                      this.toggleItemStatic(ind)\n                    }}\n                  >\n                    pin widget to grid\n                  </Button> */}\n                  {widget.settingsComponent && (\n                    <Button\n                      style={\n                        {\n                          // marginLeft: '8px'\n                        }\n                      }\n                      className='settingsButton'\n                      icon\n                      onClick={() => {\n                        this.showWidgetSettings(key)\n                      }}\n                    >\n                      settings\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  onAddItem = (type) => {\n    /*eslint no-console: 0*/\n    var itemConstraints = widgets[type].gridSettings || {}\n    // console.log('adding', 'n' + this.state.newCounter)\n    var newItem = {\n      i: 'widget-' + this.state.widgetCount,\n      x: 0,\n      y: 0, // puts it at the bottom\n      w: 2,\n      h: 2,\n      type: type,\n      ...itemConstraints\n    }\n\n    var [x, y] = this.findPositionForItem(newItem)\n    newItem.x = x\n    newItem.y = y\n    this.setState(\n      {\n        // Add a new item. It must have a unique key!\n        items: this.state.items.concat(newItem),\n        // Increment the counter to ensure key is always unique.\n        widgetCount: this.state.widgetCount + 1\n      },\n      () => {\n        saveWidgetCount(this.state.widgetCount)\n      }\n    )\n  }\n\n  onRemoveItem = (i) => {\n    var itemKey = this.state.items[i].i\n\n    deleteWidgetContent(itemKey).then((oldContent) => {\n      this.setState({\n        items: [...this.state.items].filter(function (item, ind) {\n          return ind !== i\n        }),\n        recentlyDeletedItems: [\n          ...this.state.recentlyDeletedItems,\n          {\n            item: this.state.items[i],\n            timeout: setTimeout(() => {\n              console.log('Permanently deleting item')\n              this.setState({\n                recentlyDeletedItems: [\n                  ...this.state.recentlyDeletedItems\n                ].filter(\n                  // loop through our recently deleted items\n                  // and delete the one that has the same key\n                  // as the one we deleted\n                  function (recentlyDeletedItem) {\n                    return recentlyDeletedItem.item.i !== itemKey\n                  }\n                )\n              })\n            }, 5000)\n          }\n        ],\n        recentlyDeletedItemContents: [\n          ...this.state.recentlyDeletedItemContents,\n          {\n            content: oldContent,\n            key: itemKey,\n            timeout: setTimeout(() => {\n              console.log('Permanently deleting widget content')\n              this.setState({\n                recentlyDeletedItemContents: [\n                  ...this.state.recentlyDeletedItemContents\n                ].filter(\n                  // loop through our recently deleted items' contents\n                  // and delete the one that has the same key\n                  // as the one we deleted\n                  function (recentlyDeletedItem) {\n                    return recentlyDeletedItem.key !== itemKey\n                  }\n                )\n              })\n            }, 5000)\n          }\n        ]\n      })\n    })\n  }\n\n  render() {\n    console.log('Rendering...')\n    console.log(this.state.items)\n    let showGridControls =\n      this.state.editing &&\n      !this.state.widgetSettings &&\n      !this.props.appSettingsOpen\n\n    // don't show grid controls when app settings or widget settings are open\n\n    return (\n      <>\n        <div>\n          <ReactGridLayout\n            onLayoutChange={this.onLayoutChange}\n            layout={this.state.items}\n            onBreakpointChange={this.onBreakpointChange}\n            measureBeforeMount={true}\n            useCSSTransforms={true}\n            isDraggable={showGridControls}\n            isResizable={showGridControls}\n            preventCollision={true}\n            draggableCancel='.editButton'\n            // TODO: this doesn't work...\n            // onClick={(e) => {\n            //   console.log('clicked')\n            //   console.log(e.currentTarget)\n            //   console.log(e.target)\n            //   if (this.state.editing && e.target === e.currentTarget) {\n            //     this.setState({ editing: false })\n            //   }\n            // }}\n            {...this.props}\n\n            // draggableHandle='.draggableOverlay'\n          >\n            {this.state.items.map((el, index) => this.createElement(el, index))}\n          </ReactGridLayout>\n        </div>\n        {this.state.widgetCount !== false && (\n          <AddButtons addItem={this.onAddItem} {...this.props} />\n        )}\n\n        <Button\n          style={{\n            position: 'fixed',\n            right: 8,\n            bottom: 8,\n            height: 48,\n            width: 48,\n            padding: 12\n          }}\n          icon\n          // primary={this.state.editing}\n          swapTheming\n          onClick={this.toggleEditing}\n          className={\n            'actionButton ' +\n            (this.props.appSettings.buttonStyle === 'light' ? 'light' : '')\n          }\n        >\n          {this.state.editing ? 'done' : 'edit'}\n        </Button>\n      </>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nimport { SketchPicker } from 'react-color'\n\nexport default class ColorPicker extends Component {\n  state = {\n    color: this.props.initialColor\n  }\n\n  handleChange = (color) => {\n    this.setState({ color: color.hex })\n  }\n\n  handleChangeComplete = (color) => {\n    this.props.handleChangeComplete(color.hex)\n    this.setState({ color: color.hex })\n  }\n\n  render() {\n    return (\n      <SketchPicker\n        color={this.state.color}\n        onChange={this.handleChange}\n        onChangeComplete={this.handleChangeComplete}\n        disableAlpha={true}\n        presetColors={[\n          '#fafafa', // $md-grey-50\n          '#ffcdd2', // $md-red-100,\n          '#bbdefb', // $md-blue-100\n          '#b3e5fc', // $md-light-blue-100\n          '#c8e6c9', // $md-green-100\n          '#fff9c4', // $md-yellow-100\n          '#fff0b2', // $md-orange-100\n          '#d7ccc8', // $md-brown-100\n\n          '#eee', // $md-grey-200\n          '#ef9a9a', // $md-red-200\n          '#90caf9', // $md-blue-200\n          '#81d4fa', // $md-light-blue-200\n          '#a5d6a7', // $md-green-200\n          '#fff59d', // $md-yellow-200\n          '#ffcc80', // $md-orange-200\n          '#b39ddb', // md-deep-purple-200\n\n          '#9e9e9e', // $md-grey-500\n          '#f44336', // $md-red-500\n          '#2196f3', // $md-blue-500\n          '#03a9f4', // $md-light-blue-500\n          '#4caf50', // $md-green-500\n          '#ffeb3b', // $md-yellow-500\n          '#ff9800', // $md-orange-500\n          '#FFFFFF' // white\n        ]}\n      />\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Button, LinearProgress } from 'react-md'\n\nconst UploadProgress = ({ progress, onAbortClick, file }) => {\n  if (typeof progress !== 'number') {\n    return null\n  }\n\n  let uploading\n  if (file && file.name) {\n    uploading = <p>{`Uploading ${file.name}.`}</p>\n  }\n\n  return (\n    <header className='md-cell md-cell--12'>\n      <LinearProgress id='file-upload-progress' value={progress} />\n      {uploading}\n      <Button raised onClick={onAbortClick}>\n        Abort\n      </Button>\n    </header>\n  )\n}\n\nUploadProgress.propTypes = {\n  progress: PropTypes.number,\n  onAbortClick: PropTypes.func,\n  file: PropTypes.shape({\n    name: PropTypes.string.isRequired\n  })\n}\n\nexport default UploadProgress\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport cn from 'classnames'\nimport { Button, Card, CardTitle, FontIcon, Media } from 'react-md'\n\nfunction formatBytes(bytes, decimals = 2) {\n  if (bytes === 0) return '0 Bytes'\n\n  const k = 1024\n  const dm = decimals < 0 ? 0 : decimals\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]\n}\n\nclass UploadedFileCard extends PureComponent {\n  static propTypes = {\n    file: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      size: PropTypes.number.isRequired,\n      lastModified: PropTypes.instanceOf(Date).isRequired,\n      data: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.instanceOf(ArrayBuffer)\n      ]).isRequired\n    }).isRequired,\n    onRemoveClick: PropTypes.func.isRequired\n    // locale: PropTypes.string\n  }\n\n  state = {\n    // aspectRatio: undefined\n  }\n\n  formatter = Intl.DateTimeFormat('en-US')\n\n  gcd = (a, b) => {\n    if (b === 0) {\n      return a\n    }\n\n    return this.gcd(b, a % b)\n  }\n\n  findClosestAspectRatio = (e) => {\n    const { naturalHeight: h, naturalWidth: w } = e.target\n    const denominator = this.gcd(w, h)\n    const x = w / denominator\n    const y = h / denominator\n\n    if (x < y) {\n      this.setState({ aspectRatio: '1-1' })\n    }\n  }\n\n  removeCard = () => {\n    this.props.onRemoveClick(this.props.file)\n  }\n\n  render() {\n    // const { aspectRatio } = this.state\n    const { name, size, lastModified, data, type } = this.props.file\n\n    let content = (\n      <img\n        src={data}\n        alt={name}\n        //   onLoad={this.findClosestAspectRatio}\n      />\n    )\n\n    content = <div className={'aspect-ratio'}>{content}</div>\n\n    return (\n      <Card className={cn('file-inputs__upload-card')}>\n        <Button\n          icon\n          onClick={this.removeCard}\n          className='file-inputs__upload-card__remove'\n        >\n          close\n        </Button>\n        {content}\n        <CardTitle\n          title={`${name}`}\n          //   subtitle={`Last Modified: ${this.formatter.format(\n          //     lastModified\n          //   )}. Size: (${formatBytes(size)})`}\n        />\n      </Card>\n    )\n  }\n}\n\nexport default UploadedFileCard\n","import React, { PureComponent } from 'react'\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup'\nimport { Button, FileUpload } from 'react-md'\nimport guid from 'uuid/dist/v1'\nimport { without } from 'lodash/array'\n\nimport './_styles.scss'\nimport UploadProgress from './UploadProgress'\nimport UploadedFileCard from './UploadedFileCard'\n\nconst LOADING_PROPS = {\n  'aria-busy': true,\n  'aria-describedby': 'file-upload-progress'\n}\n\nexport default class SimpleFileUpload extends PureComponent {\n  constructor(props) {\n    super(props)\n    console.log('props.initialImage')\n    console.log(props.initialImage)\n    this.state = {\n      progress: null,\n      file: props.initialImage,\n      showButton: true\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timeout) {\n      clearTimeout(this.timeout)\n    }\n  }\n\n  setFileUpload = (fileUpload) => {\n    this.fileUpload = fileUpload\n  }\n\n  setFile = (file) => {\n    this.setState({ file })\n  }\n\n  abortUpload = () => {\n    if (this.fileUpload) {\n      this.fileUpload.abort()\n    }\n\n    this.setState({ file: null, progress: null, showButton: true })\n  }\n\n  /**\n   * This is triggered once a file has been successfully uploaded.\n   *\n   * @param {File} uploadedFile - the fully uploaded file. The properties\n   *    of this object change depending on the browser, but normally\n   *    the name, size, type, and lastModifiedDate are the same.\n   * @param {String} uploadedData - This will be whatever the results of\n   *    the upload was. So this could be the text in a file, a data-url\n   *    for an image, or some other content for other file types.\n   */\n  handleLoad = (uploadedFile, uploadedData) => {\n    const { name, size, type, lastModified } = uploadedFile\n    const file = {\n      id: guid(),\n      name,\n      size,\n      type,\n      data: uploadedData,\n      lastModified: new Date(lastModified)\n    }\n\n    this.props.onLoadImage(file)\n    // Show progress bar for one more second\n    this.timeout = setTimeout(() => {\n      this.timeout = null\n\n      this.setState({ progress: null })\n    }, 1000)\n\n    this.setState({ file, progress: 100, showButton: false })\n  }\n\n  handleProgress = (file, progress) => {\n    // The progress event can sometimes happen once more after the abort\n    // has been called. So this just a sanity check\n    if (this.state.file) {\n      this.setState({ progress })\n    }\n  }\n\n  removeFile = (file) => {\n    this.setState({ file: null, showButton: true })\n    this.props.removeImage()\n  }\n\n  render() {\n    const { progress, file } = this.state\n\n    const uploadedFileCard = file && (\n      <UploadedFileCard\n        key={file.id}\n        file={file}\n        onRemoveClick={this.removeFile}\n      />\n    )\n\n    return (\n      <div>\n        <UploadProgress\n          progress={progress}\n          onAbortClick={this.abortUpload}\n          file={file}\n        />\n\n        <CSSTransitionGroup\n          component='section'\n          transitionName='md-cross-fade'\n          transitionEnterTimeout={300}\n          transitionLeave={false}\n          //   className='md-grid'\n          {...(typeof progress === 'number' ? LOADING_PROPS : undefined)}\n        >\n          {uploadedFileCard}\n        </CSSTransitionGroup>\n        {\n          <FileUpload\n            accept='image/*'\n            id='background-image-upload'\n            secondary\n            name='background-image-upload'\n            ref={this.setFileUpload}\n            label={this.state.file ? 'Upload New Image' : 'Upload Image'}\n            onLoadStart={this.setFile}\n            onProgress={this.handleProgress}\n            onLoad={this.handleLoad}\n          />\n        }\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport {\n  Grid,\n  Cell,\n  Card,\n  CardTitle,\n  Button,\n  SelectionControlGroup,\n  TextField,\n  Slider,\n  ExpansionList,\n  ExpansionPanel\n} from 'react-md'\n\nimport ColorPicker from '../ColorPicker'\n\nimport BackgroundImageChooser from '../FileUpload'\n\nimport {\n  getSplashSettings,\n  saveSplashSettings\n} from '../browser-storage/splash-settings'\n\nvar backgroundColor =\n  getSplashSettings('appearance', 'backgroundColor') || '#fafafa'\n\nvar backgroundImage = getSplashSettings('appearance', 'backgroundImage') || null\nvar backgroundImageDarkness =\n  getSplashSettings('appearance', 'backgroundImageDarkness') || 0.2\n\nvar backgroundImageURL =\n  getSplashSettings('appearance', 'backgroundImageURL') ||\n  './background-images/white-mountain.jpg'\n\nvar background = getSplashSettings('appearance', 'background') || 'image-url' // 'color' or 'image' or 'image-url'\n\nfunction setBackgroundColor(color) {\n  document.body.style.background = color\n  backgroundColor = color\n  saveSplashSettings('appearance', 'backgroundColor', color)\n  saveSplashSettings('appearance', 'background', 'color')\n}\n\nfunction setBackgroundImage(image, darkness) {\n  if (image && image.data) {\n    document.body.style['background-image'] = `linear-gradient(\n        rgba(0, 0, 0, ${darkness}), \n        rgba(0, 0, 0, ${darkness})\n      ), url(${image.data})`\n    backgroundImage = image\n    saveSplashSettings('appearance', 'backgroundImage', image)\n    saveSplashSettings('appearance', 'background', 'image')\n\n    saveSplashSettings('appearance', 'backgroundImageDarkness', darkness)\n  }\n}\n\nfunction setBackgroundImageURL(imageURL, darkness) {\n  if (imageURL) {\n    document.body.style['background-image'] = `linear-gradient(\n        rgba(0, 0, 0, ${darkness}), \n        rgba(0, 0, 0, ${darkness})\n      ), url(${imageURL})`\n    backgroundImageURL = imageURL\n    saveSplashSettings('appearance', 'backgroundImageURL', imageURL)\n    saveSplashSettings('appearance', 'background', 'image-url')\n\n    saveSplashSettings('appearance', 'backgroundImageDarkness', darkness)\n  }\n}\n\nexport default class AppearanceSettings extends Component {\n  constructor() {\n    super()\n    this.state = {\n      background: background,\n      backgroundImageURL: backgroundImageURL\n    }\n  }\n\n  onLoadImage = (image) => {\n    console.log(image)\n    setBackgroundImage(image, backgroundImageDarkness)\n  }\n\n  onRemoveImage = () => {\n    background = 'color'\n    this.setState({ background: 'color' })\n    setBackgroundColor(backgroundColor)\n    backgroundImage = null\n    saveSplashSettings('appearance', 'backgroundImage', null)\n    saveSplashSettings('appearance', 'background', 'color')\n  }\n\n  onDarknessChange = (newValue) => {\n    let { background } = this.state\n    if (background === 'image') {\n      setBackgroundImage(backgroundImage, newValue)\n    } else if (background === 'image-url') {\n      setBackgroundImageURL(backgroundImageURL, newValue)\n    }\n    backgroundImageDarkness = newValue\n  }\n\n  render() {\n    return (\n      <ExpansionList>\n        <ExpansionPanel\n          label='Background'\n          // secondaryLabel={<i>Customize background image or color</i>}\n          // defaultExpanded\n          footer={null}\n        >\n          <Grid className='grid-example'>\n            <Cell size={4}>\n              <SelectionControlGroup\n                id='selection-control-group-radios'\n                name='radio-example'\n                type='radio'\n                // label={'Background'}\n                value={this.state.background}\n                onChange={(value) => {\n                  this.setState({ background: value })\n                  background = value // store so it updates on settings re-open\n\n                  // Now change styles on page body\n                  if (value === 'color') {\n                    setBackgroundColor(backgroundColor)\n                  } else if (value === 'image') {\n                    setBackgroundImage(backgroundImage, backgroundImageDarkness)\n                  } else if (value === 'image-url') {\n                    setBackgroundImageURL(\n                      backgroundImageURL,\n                      backgroundImageDarkness\n                    )\n                  }\n                }}\n                controls={[\n                  {\n                    label: 'Color',\n                    value: 'color'\n                  },\n                  {\n                    label: 'Image URL',\n                    value: 'image-url'\n                  },\n                  {\n                    label: 'Upload Image',\n                    value: 'image'\n                  }\n                ]}\n              />\n            </Cell>\n            <Cell size={4}>\n              {this.state.background === 'color' && (\n                <ColorPicker\n                  initialColor={backgroundColor}\n                  handleChangeComplete={setBackgroundColor}\n                  // onChangeComplete={this.handleChangeComplete}\n                />\n              )}\n              {this.state.background === 'image-url' && (\n                <>\n                  <TextField\n                    id='edit-background-image'\n                    label='Background Image URL'\n                    lineDirection='center'\n                    placeholder='https://example.com/image.jpg'\n                    // className='md-cell md-cell--bottom'\n                    style={{ width: 'auto' }}\n                    value={backgroundImageURL}\n                    inlineIndicator={\n                      <Button\n                        icon\n                        className='text-fields__inline-btn'\n                        onClick={() => {\n                          let defaultBackgroundImage =\n                            './background-images/white-mountain.jpg'\n                          // Default background image\n                          backgroundImageURL = defaultBackgroundImage\n                          setBackgroundImageURL(\n                            defaultBackgroundImage,\n                            backgroundImageDarkness\n                          )\n                          this.setState({\n                            backgroundImageURL: defaultBackgroundImage\n                          })\n                        }}\n                      >\n                        settings_backup_restore\n                      </Button>\n                    }\n                    onChange={(newURL) => {\n                      backgroundImageURL = newURL\n                      setBackgroundImageURL(newURL, backgroundImageDarkness)\n                      this.setState({ backgroundImageURL: newURL })\n                    }}\n                  />\n                  <br /> <br />\n                  {backgroundImageURL && (\n                    <>\n                      <Card className={'file-inputs__upload-card'}>\n                        <div className={'aspect-ratio'}>\n                          <img src={backgroundImageURL} alt={'Wallpaper'} />\n                        </div>\n                        <CardTitle title='Background Image' />\n                      </Card>\n                      <Slider\n                        id='darken-image-url-slider'\n                        label='Darken Image'\n                        min={0}\n                        max={1}\n                        step={0.1}\n                        valuePrecision={2}\n                        defaultValue={backgroundImageDarkness}\n                        onChange={this.onDarknessChange}\n                        discrete\n                      />\n                    </>\n                  )}\n                </>\n              )}\n              {this.state.background === 'image' && (\n                <>\n                  <BackgroundImageChooser\n                    initialImage={backgroundImage}\n                    onLoadImage={this.onLoadImage}\n                    removeImage={this.onRemoveImage}\n                  />\n                  <br /> <br />\n                  {backgroundImage && backgroundImage.data && (\n                    <Slider\n                      id='custom-range-step-slider'\n                      label='Darken Image'\n                      min={0}\n                      max={1}\n                      step={0.1}\n                      valuePrecision={2}\n                      defaultValue={backgroundImageDarkness}\n                      onChange={this.onDarknessChange}\n                      discrete\n                    />\n                  )}\n                </>\n              )}\n            </Cell>\n          </Grid>\n        </ExpansionPanel>\n        <ExpansionPanel label='Buttons' footer={null}>\n          <SelectionControlGroup\n            id='action-button-style'\n            name='action-button-select'\n            type='radio'\n            value={this.props.settings.buttonStyle}\n            onChange={(value) => {\n              this.props.onSettingsChange('appearance', 'buttonStyle', value)\n            }}\n            label='Button Style'\n            controls={[\n              {\n                label: 'Dark',\n                value: 'dark'\n              },\n              {\n                label: 'Light',\n                value: 'light'\n              }\n            ]}\n          />\n        </ExpansionPanel>\n      </ExpansionList>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport {\n  Button,\n  DialogContainer,\n  Divider,\n  TextField,\n  Toolbar,\n  FileUpload,\n  Grid,\n  Cell,\n  Tabs,\n  SelectionControlGroup,\n  Tab,\n  TabsContainer,\n  SVGIcon\n} from 'react-md'\n\nimport Appearance from './Appearance'\n\n// import paypalIcon from '../assets/icons/paypal-font-awesome-icon.svg'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport { faPaypal } from '@fortawesome/free-brands-svg-icons/faPaypal'\n\nimport {\n  getSplashSettings,\n  saveSplashSettings\n} from '../browser-storage/splash-settings'\n\nimport './settings.scss'\n\nexport default class SimpleFullPageDialog extends Component {\n  render() {\n    const { visible } = this.props\n\n    // const TheToolbar = (\n    //   <Toolbar\n    //     // fixed\n    //     title='Settings'\n    //     titleId='simple-full-page-dialog-title'\n    //     // nav={\n    //     //   <Button icon onClick={this.props.onHide}>\n    //     //     close\n    //     //   </Button>\n    //     // }\n    //     actions={\n    //       <Button flat onClick={this.props.onHide}>\n    //         Save\n    //       </Button>\n    //     }\n    //   />\n    // )\n\n    return (\n      <DialogContainer\n        id='splash-settings-dialog'\n        visible={visible}\n        // pageX={pageX}\n        // pageY={pageY}\n        onHide={this.props.onHide}\n        transitionEnterTimeout={10}\n        transitionLeaveTimeout={10}\n        aria-labelledby='settings-dialog'\n        height='500px'\n        width='80%'\n        className='settings-dialog'\n      >\n        <TabsContainer\n          // panelClassName='md-grid'\n          colored\n          primary\n          // toolbar={TheToolbar}\n          // defaultTabIndex={2}\n        >\n          <Tabs tabId='simple-tab'>\n            <Tab label='Appearance'>\n              <Appearance {...this.props} />\n            </Tab>\n            <Tab label='Miscellaneous'>\n              <h3>More settings coming soon!</h3>\n            </Tab>\n            <Tab label='About'>\n              <div>\n                <h1\n                  style={{\n                    margin: 'auto',\n                    width: 'fit-content',\n                    marginBottom: '20px'\n                  }}\n                >\n                  Splashpad\n                </h1>\n                <p>\n                  Splashpad is completely open-source and will remain free\n                  forever. All of my work on it is unpaid and in my free time.\n                </p>\n                <p>\n                  I would deeply appreciate donations, as a gesture of gratitude\n                  and as funding for future development of Splashpad.\n                </p>\n                <Button\n                  raised\n                  primary\n                  iconEl={<FontAwesomeIcon icon={faPaypal} />}\n                  href={\n                    'https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=48CUT8BYGFRAQ&item_name=Help+fund+my+development+of+Splashpad%21&currency_code=USD&source=url'\n                  }\n                  style={{\n                    height: '36px',\n                    marginBottom: '6px'\n                  }}\n                >\n                  Donate with PayPal!\n                </Button>\n                <br />\n                <br />\n                <br />\n                <b>Links</b>\n                <ul>\n                  <li>\n                    <a href='https://github.com/nebrelbug/splash'>\n                      GitHub repository\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </Tab>\n            <Tab label='Support'>\n              <h1\n                style={{\n                  margin: 'auto',\n                  width: 'fit-content',\n                  marginBottom: '20px'\n                }}\n              >\n                Support\n              </h1>\n              <p>We're sorry you're having trouble!</p>\n              <p>\n                Try creating a GitHub issue at{' '}\n                <a href='https://github.com/nebrelbug/splashpad/issues'>\n                  the GitHub repository, or browse through existing issues\n                </a>\n              </p>\n            </Tab>\n          </Tabs>\n        </TabsContainer>\n      </DialogContainer>\n    )\n  }\n}\n","import React, { PureComponent } from 'react'\nimport { Button, Snackbar } from 'react-md'\nimport Grid from './Grid'\nimport Settings from './Settings/index.jsx'\nimport {\n  getSplashSettings,\n  saveSplashSettings\n} from './browser-storage/splash-settings'\n\nimport inkContextTypes from 'react-md/lib/Inks/inkContextTypes'\n\nimport './App.css'\n\nexport default class App extends PureComponent {\n  static childContextTypes = inkContextTypes\n\n  getChildContext() {\n    return { inkDisabled: true }\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      settingsOpen: false,\n      settings: {\n        buttonStyle: getSplashSettings('appearance', 'buttonStyle') || 'light'\n      },\n      toasts: [],\n      autohide: true\n    }\n  }\n\n  addToast = (text, action, autohide = true) => {\n    this.setState((state) => {\n      const toasts = state.toasts.slice()\n      toasts.push({ text, action })\n      return { toasts, autohide }\n    })\n  }\n\n  /*\n    this.addToast('Toast Message', {\n      children: 'Action',\n      onClick: () => {\n        doStuff()\n      }\n    })\n  */\n\n  dismissToast = () => {\n    const [, ...toasts] = this.state.toasts\n    this.setState({ toasts })\n  }\n\n  toggleSettings = () => {\n    this.setState({ settingsOpen: !this.state.settingsOpen })\n  }\n\n  onSettingsChange = (category, key, newValue) => {\n    this.setState(\n      {\n        settings: {\n          ...this.state.settings,\n          [key]: newValue\n        }\n      },\n      () => {\n        saveSplashSettings(category, key, newValue)\n      }\n    )\n  }\n\n  render() {\n    return (\n      <>\n        <div ref={this.divRef}>\n          <Settings\n            visible={this.state.settingsOpen}\n            onHide={this.toggleSettings}\n            settings={this.state.settings}\n            onSettingsChange={this.onSettingsChange}\n          />\n          <Button\n            style={{\n              position: 'fixed',\n              left: 8,\n              bottom: 8,\n              height: 48,\n              width: 48,\n              padding: 12,\n              zIndex: 999\n            }}\n            icon\n            swapTheming\n            onClick={this.toggleSettings}\n            className={\n              'actionButton ' +\n              (this.state.settings.buttonStyle === 'light' ? 'light' : '')\n            }\n          >\n            {this.state.settingsOpen ? 'check' : 'settings'}\n          </Button>\n          {/* <Drawer\n          id='splashpad-main-drawer'\n          type={Drawer.DrawerTypes.TEMPORARY}\n          visible={this.state.drawerOpen}\n          position='left'\n          navItems={inboxListItems}\n          drawerTitle='Splashpad'\n          header={\n            <Toolbar\n              nav={null}\n              actions={null}\n              className='md-divider-border md-divider-border--bottom'\n              title='Splashpad'\n            />\n          }\n        /> */}\n          <Grid\n            appSettingsOpen={this.state.settingsOpen}\n            appSettings={this.state.settings}\n            addToast={this.addToast}\n            dismissToast={this.dismissToast}\n          />\n        </div>\n        <Snackbar\n          id='splash-snackbar'\n          toasts={this.state.toasts}\n          autohide={this.state.autohide}\n          autohideTimeout={4500}\n          onDismiss={this.dismissToast}\n        />\n      </>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App.jsx'\nimport * as serviceWorker from './serviceWorker'\n\nimport WebFontLoader from 'webfontloader'\n\nWebFontLoader.load({\n  google: {\n    families: ['Roboto:300,400,500,700', 'Material Icons']\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","var localforage = require('localforage')\n\nvar widgetStore = localforage.createInstance({\n  name: 'splash-widgets',\n  driver: localforage.LOCALSTORAGE\n})\n\nfunction addWidget(uniqueWidgetId, details) {\n  widgetStore\n    .getItem('widgets')\n    .then(function (widgets) {\n      // This code runs once the value has been loaded\n      // from the offline store.\n      widgetStore.setItem('widgets', {\n        ...widgets,\n        [uniqueWidgetId]: details\n      })\n    })\n    .catch(function (err) {\n      // This code runs if there were any errors\n      console.log(err)\n    })\n}\n\nfunction saveWidgets(widgets) {\n  widgetStore.setItem('widgets', widgets)\n}\n\nasync function getWidgets() {\n  var widgets = await widgetStore.getItem('widgets')\n  var widgetCount = await widgetStore.getItem('current-widget-count')\n  return { widgets, widgetCount }\n}\n\nfunction getWidgetsSync() {\n  let widgets = []\n  let widgetCount = {}\n  if (global.localStorage) {\n    try {\n      widgets =\n        JSON.parse(global.localStorage.getItem('splash-widgets/widgets')) || []\n      widgetCount =\n        Number(\n          global.localStorage.getItem('splash-widgets/current-widget-count')\n        ) || 3\n    } catch (e) {\n      /*Ignore*/\n    }\n  }\n  return { widgets, widgetCount }\n}\n\nasync function getWidget(uniqueWidgetId) {\n  return await widgetStore.getItem('widgets')[uniqueWidgetId]\n}\n\nfunction saveWidgetCount(newCount) {\n  widgetStore.setItem('current-widget-count', newCount)\n}\n\nasync function getWidgetCount() {\n  return await widgetStore.getItem('current-widget-count')\n}\n\nexport {\n  addWidget,\n  getWidget,\n  getWidgets,\n  getWidgetsSync,\n  saveWidgets,\n  saveWidgetCount,\n  getWidgetCount\n}\n"],"sourceRoot":""}